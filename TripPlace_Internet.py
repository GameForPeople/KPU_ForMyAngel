# -*- coding: cp949 -*-
from TripPlace_XML import *
from http.client import HTTPConnection
from http.server import BaseHTTPRequestHandler, HTTPServer

##global
conn = None
#arcode = None   #Áö¿ª¹øÈ£

regKey = 'nHhF%2FXpBrln%2Fp4eurQr9Hn0sY0dZMB9Te%2ByR5uzHoZKpC%2BoE3ZwREHfHX3QJ%2FGsCXTm6%2FLgAZjZKqAEHLCy4pw%3D%3D'

#regKey = '9dc253be6f5224567ede1f03b84a4e24'

# ³×ÀÌ¹ö OpenAPI Á¢¼Ó Á¤º¸ information
server = "api.visitkorea.or.kr"
#server = "apis.daum.net"

# smtp Á¤º¸
host = "smtp.gmail.com"  # Gmail SMTP ¼­¹ö ÁÖ¼Ò.
port = "587"


def userURIBuilderArea(server, key, areaCode, page):
    str = "http://" + server + "/openapi/service/rest/KorService/areaBasedList" + "?"

    if page == 1:
        str += "ServiceKey=" + key + "&" + "areaCode=" + areaCode + "&numOfRows=20&pageNo=1" ‚
                                                                "&MobileOS=ETC&MobileApp=AppTesting"
    return str

#http://api.visitkorea.or.kr/openapi/service/rest/KorService/areaBasedList?ServiceKey=ÀÎÁõÅ°&areaCode=35&MobileOS=ETC&MobileApp=AppTesting

def connectOpenAPIServer():
    global conn, server
    conn = HTTPConnection(server)


def getTripPlaceDataArea(areaCode, page):
    global server, regKey, conn
    if conn == None:
        connectOpenAPIServer()
    # uri = userURIBuilder(server, key=regKey, query='%20', display="1", start="1", target="book_adv", d_isbn=isbn)

    uri = userURIBuilderArea(server, regKey, areaCode, page)  # ´ÙÀ½ °Ë»ö URL
    conn.request("GET", uri)
    print(uri)

    req = conn.getresponse()

    if int(req.status) == 200:
        print("³î°÷ Á¤º¸¸¦ ¸ðµÎ ¹Þ¾Æ¿Ô½À´Ï´Ù")
        return extractTripPlaceData(req.read())
    else:
        print("¿ª½Ã ³î°÷ Á¤º¸´Â ¹Þ¾Æ¿ÀÁö ¸øÇß½À´Ï´Ù.")
        return None

def getTripPlaceDataCate(page):
    global server, regKey, conn
    if conn == None:
        connectOpenAPIServer()
    # uri = userURIBuilder(server, key=regKey, query='%20', display="1", start="1", target="book_adv", d_isbn=isbn)
    uri = userURIBuilder(server, regKey, areaCode)  # ´ÙÀ½ °Ë»ö URL
    conn.request("GET", uri)
    print(uri)
    req = conn.getresponse()
    if int(req.status) == 200:
        print("³î°÷ Á¤º¸¸¦ ¸ðµÎ ¹Þ¾Æ¿Ô½À´Ï´Ù")
        return extractTripPlaceData(req.read())
    else:
        print("¿ª½Ã ³î°÷ Á¤º¸´Â ¹Þ¾Æ¿ÀÁö ¸øÇß½À´Ï´Ù.")
        return None


#²ôÁý¾î ³»´Â °÷
def extractTripPlaceData(strXml):
    from xml.etree import ElementTree
    tree = ElementTree.fromstring(strXml)
    #print(strXml)
    # TripPlaceData(Book) ¿¤¸®¸ÕÆ®¸¦ °¡Á®¿É´Ï´Ù.
    tripPlaceIndex = 1
    ####################¼º°øÇÑÄÚ?¤»¤»¤»¤»¤»¤»¤»¤»¤» ¿ÕÁÁ°í¿ä!!!!
    for item in tree.iter("item"):
        tripPlaceTitle = item.find("title")
        tripPlaceAddress = item.find("add1")
        tripPlaceTel = item.find("tel")
        print(tripPlaceIndex)
        print(tripPlaceTitle.text)
        if tripPlaceAddress != None:
            print(tripPlaceAddress.text)
        if tripPlaceTel != None:
            print(tripPlaceTel.text)
        print()
        tripPlaceIndex += 1

        #print("  " + tripPlaceTitle.text + "  ¹øÈ£ : " + tripPlaceTel + "   ÁÖ¼Ò : " + tripPlaceAddress)

    #####################
    #itemElements = tree.getiterator("item")  # return list type
    #print(itemElements)
    #for item in itemElements:
    #    #isbn = item.find("isbn")
    #    strTitle = item.find("title")
    #    strAddress = item.find("add1")
    #    strNumber = item.find("tel")
    #    print(item.get("title"))
    #    print(strTitle)
    #    #if len(strTitle.text) > 0:
    #    return {"ÁÖ¼Ò": strAddress, "¹øÈ£": strNumber}
    ########################


def sendMain():
    global host, port
    html = ""
    title = str(input('Title :'))
    senderAddr = str(input('sender email address :'))
    recipientAddr = str(input('recipient email address :'))
    msgtext = str(input('write message :'))
    passwd = str(input(' input your password of gmail account :'))
    msgtext = str(input('Do you want to include book data (y/n):'))
    if msgtext == 'y':
        keyword = str(input('input keyword to search:'))
        html = MakeHtmlDoc(SearchBookTitle(keyword))

    import mysmtplib
    # MIMEMultipartÀÇ MIMEÀ» »ý¼ºÇÕ´Ï´Ù.
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText

    # Message container¸¦ »ý¼ºÇÕ´Ï´Ù.
    msg = MIMEMultipart('alternative')

    # set message
    msg['Subject'] = title
    msg['From'] = senderAddr
    msg['To'] = recipientAddr

    msgPart = MIMEText(msgtext, 'plain')
    bookPart = MIMEText(html, 'html', _charset='UTF-8')

    # ¸Þ¼¼Áö¿¡ »ý¼ºÇÑ MIME ¹®¼­¸¦ Ã·ºÎÇÕ´Ï´Ù.
    msg.attach(msgPart)
    msg.attach(bookPart)

    print("connect smtp server ... ")
    s = mysmtplib.MySMTP(host, port)
    # s.set_debuglevel(1)
    s.ehlo()
    s.starttls()
    s.ehlo()
    s.login(senderAddr, passwd)  # ·Î±äÀ» ÇÕ´Ï´Ù.
    s.sendmail(senderAddr, [recipientAddr], msg.as_string())
    s.close()

    print("Mail sending complete!!!")


class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        from urllib.parse import urlparse
        import sys

        parts = urlparse(self.path)
        keyword, value = parts.query.split('=', 1)

        if keyword == "title":
            html = MakeHtmlDoc(SearchBookTitle(value))  # keyword¿¡ ÇØ´çÇÏ´Â Ã¥À» °Ë»öÇØ¼­ HTML·Î ÀüÈ¯ÇÕ´Ï´Ù.
            ##Çì´õ ºÎºÐÀ» ÀÛ¼º.
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(html.encode('utf-8'))  # º»ºÐ( body ) ºÎºÐÀ» Ãâ·Â ÇÕ´Ï´Ù.
        else:
            self.send_error(400, ' bad requst : please check the your url')  # Àß ¸øµÈ ¿äÃ»¶ó´Â ¿¡·¯¸¦ ÀÀ´äÇÑ´Ù.


def startWebService():
    try:
        server = HTTPServer(('localhost', 8080), MyHandler)
        print("started http server....")
        server.serve_forever()

    except KeyboardInterrupt:
        print("shutdown web server")
        server.socket.close()  # server Á¾·áÇÕ´Ï´Ù.


def checkConnection():
    global conn
    if conn == None:
        print("Error : ¿¬°á ½ÇÆÐ")
        return False
    return True
